using CognitiveMaps.MAT.BL;
using CognitiveMaps.MAT.Models;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;
using System.Linq;
using System;
using System.Data;

namespace CognitiveMaps.Views
{
    public class VulnerabilityPresenter
    {
        private VulnerabilityView View;

        public VulnerabilityPresenter(VulnerabilityView view)
        {
            View = view;
        }

        private MatBL _businessLogicForModeling;
        /// <summary>
        /// Для работы с классом реализующим логику моделирования актуальных угроз
        /// </summary>
        private MatBL BusinessLogicForModeling
        {
            get
            {
                return _businessLogicForModeling ??= new MatBL();
            }
        }


        private CveBL _businessLogicForCve;
        public CveBL BusinessLogicForCve
        {
            get
            {
                return _businessLogicForCve ??= new CveBL();
            }
        }

        private BduBL _businessLogicForBdu;
        public BduBL BusinessLogicForBdu
        {
            get
            {
                return _businessLogicForBdu ??= new BduBL();
            }
        }


        /// <summary>
        /// Загрузить: Набор объектов, Таблицу данных для DataGridView, Список заголовков таблиц
        /// Для Bdu
        /// </summary>
        /// <param name="filePath"></param>
        public void LoadBdu(string filePath)
        {
            View.BduList = BusinessLogicForBdu.GetBduList(filePath);
            View.BduDataTable = BusinessLogicForBdu.GetBduDataTable(View.BduList);
            View.BduHeaders = View.BduDataTable.Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToArray<string>();
        }

        /// <summary>
        /// Загрузить: Набор объектов, Таблицу данных для DataGridView, Список заголовков таблиц
        /// Для Cve
        /// </summary>
        /// <param name="filePath"></param>
        public void LoadCve(string filePath)
        {
            View.CveList = BusinessLogicForCve.GetCveList(filePath);
            View.CveDataTable = BusinessLogicForCve.GetBduDataTable(View.CveList);
            View.CveHeaders = View.CveDataTable.Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToArray<string>();
        }

        /// <summary>
        /// Добавление уязвимости в пользовательский лист
        /// </summary>
        /// <param name="cve"></param>
        /// <param name="bdu"></param>
        public void AddToUserList(CveEntity cve = null, BduEntity bdu = null)
        {
            View.UserList ??= new List<CommonVulnerability>();

            if (cve != null)
                View.UserList.Add(cve);
            else if (bdu != null)
                View.UserList.Add(bdu);

            View.userDataTable = BusinessLogicForModeling.GetBduDataTable(View.UserList);
        }

        /// <summary>
        /// Удаление строки из пользовательского списка
        /// </summary>
        /// <param name="index"></param>
        public void DeleteFromUserList(int index)
        {
            if (View.UserList.Count != 0 && View.UserList != null)
            {
                View.UserList.RemoveAt(index);
                View.userDataTable = BusinessLogicForModeling.GetBduDataTable(View.UserList);
            }
        }

        public void SearchInDataGrid(DataGridView dataGridView, string indexField, string text)
        {
            (dataGridView.DataSource as DataTable).DefaultView.RowFilter =
        String.Format("{0} like '{1}%'", indexField, text);
        }
    }
}
