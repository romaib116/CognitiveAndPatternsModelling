using CognitiveMaps.MAT.BL;
using CognitiveMaps.MAT.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using QuickGraph;

namespace CognitiveMaps.Views
{
    public class VulnerabilityPresenter
    {
        private VulnerabilityView View;

        public VulnerabilityPresenter(VulnerabilityView view)
        {
            View = view;
        }

        #region Инициализация объектов бизнес-логики
        private MatBL _businessLogicForModeling;
        private MatBL BusinessLogicForModeling
        {
            get
            {
                return _businessLogicForModeling ??= new MatBL();
            }
        }


        private CveBL _businessLogicForCve;
        public CveBL BusinessLogicForCve
        {
            get
            {
                return _businessLogicForCve ??= new CveBL();
            }
        }

        private BduBL _businessLogicForBdu;
        public BduBL BusinessLogicForBdu
        {
            get
            {
                return _businessLogicForBdu ??= new BduBL();
            }
        }


        private CapecBL _businessLogicForCapec;
        public CapecBL BusinessLogicForCapec
        {
            get
            {
                return _businessLogicForCapec ??= new CapecBL();
            }
        }

        #endregion

        /// <summary>
        /// Загрузить: Набор объектов, Таблицу данных для DataGridView, Список заголовков таблиц
        /// Для Bdu
        /// </summary>
        /// <param name="filePath"></param>
        public void LoadBdu(string filePath)
        {
            View.BduList = BusinessLogicForBdu.GetBduList(filePath);
            View.BduDataTable = BusinessLogicForBdu.GetBduDataTable(View.BduList);
            View.BduHeader = View.BduDataTable.Columns.Cast<DataColumn>().Where(c => c.ColumnName != "id").Select(c => c.ColumnName).ToArray<string>();
        }

        /// <summary>
        /// Загрузить: Набор объектов, Таблицу данных для DataGridView, Список заголовков таблиц
        /// Для Cve
        /// </summary>
        /// <param name="filePath"></param>
        public void LoadCve(string filePath)
        {
            View.CveList = BusinessLogicForCve.GetCveList(filePath);
            View.CveDataTable = BusinessLogicForCve.GetCveDataTable(View.CveList);
            View.CveHeader = View.CveDataTable.Columns.Cast<DataColumn>().Where(c => c.ColumnName != "id").Select(c => c.ColumnName).ToArray<string>();
        }

        /// <summary>
        /// Загрузить: Набор объектов, Таблицу данных для DataGridView, Список заголовков таблиц
        /// </summary>
        /// <param name="filePath"></param>
        public void LoadCapec(string filePath)
        {
            View.CapecList = BusinessLogicForCapec.GetCapecEntities(filePath);
            View.CapecDataTable = BusinessLogicForCapec.GetCapecDataTable(View.CapecList);
            View.CapecHeader = View.CapecDataTable.Columns.Cast<DataColumn>().Where(c => c.ColumnName != "id").Select(c => c.ColumnName).ToArray<string>();
        }

        /// <summary>
        /// Добавление уязвимости в пользовательский лист
        /// </summary>
        /// <param name="cve"></param>
        /// <param name="bdu"></param>
        public void AddToUserList(CveEntity cve = null, BduEntity bdu = null)
        {
            View.VulnList ??= new List<CommonVulnerability>();

            if (cve != null)
                View.VulnList.Add(cve);
            else if (bdu != null)
                View.VulnList.Add(bdu);

            View.VulnsDataTable = BusinessLogicForModeling.GetVulnsDataTable(View.VulnList);
        }

        /// <summary>
        /// Удаление строки из списка уязвимостей
        /// </summary>
        /// <param name="index"></param>
        public void DeleteFromVulnList(int index)
        {
            if (View.VulnList.Count != 0 && View.VulnList != null)
            {
                View.VulnList.RemoveAt(index);
                View.VulnsDataTable = BusinessLogicForModeling.GetVulnsDataTable(View.VulnList);
            }
        }

        /// <summary>
        /// Удаление строки из списка Cwe -> Capec
        /// </summary>
        /// <param name="index"></param>
        public void DeleteFromCweList(int index)
        {
            if (View.CweCapecsList.Count != 0 && View.CweCapecsList != null)
            {
                View.CweCapecsList.RemoveAt(index);
                View.CweCapecDataTable = BusinessLogicForModeling.GetCweCapecDataTable(View.CweCapecsList);
            }
        }

        /// <summary>
        /// Удаление строки из списка Capec -> Other (OWASP/WASC)
        /// </summary>
        /// <param name="index"></param>
        public void DeleteFromCapecList(int index)
        {
            if (View.CapecTaxList.Count != 0 && View.CapecTaxList != null)
            {
                View.CapecTaxList.RemoveAt(index);
                View.CapecTaxDataTable = BusinessLogicForModeling.GetCapecTaxonomiesDataTable(View.CapecTaxList);
            }
        }

        /// <summary>
        /// Поиск по датагриду
        /// </summary>
        /// <param name="dataGridView"></param>
        /// <param name="indexField"></param>
        /// <param name="text"></param>
        public void SearchInDataGrid(DataGridView dataGridView, string indexField, string text)
        {
            (dataGridView.DataSource as DataTable).DefaultView.RowFilter =
        String.Format("{0} like '%{1}%'", indexField, text);
        }


        /// <summary>
        /// Обработать пользовательский список уязвимостей => получить лист CAPECs 
        /// </summary>
        /// <param name="userList"></param>
        /// <param name="capecList"></param>
        public void ProccessUserList(List<CommonVulnerability> userList, List<CapecEntity> capecList)
        {
            View.CweCapecsList = BusinessLogicForModeling.GetProcessedCweCapecs(userList, capecList);
            View.CweCapecDataTable = BusinessLogicForModeling.GetCweCapecDataTable(View.CweCapecsList);
        }

        /// <summary>
        /// Обработать список CWE - CAPECs
        /// </summary>
        /// <param name="processedCweCapecs"></param>
        public void ProcessCapecList(List<ProcessedCweCapec> processedCweCapecs)
        {
            View.CapecTaxList = BusinessLogicForModeling.GetProcessedCapecTaxonomies(View.CweCapecsList);
            View.CapecTaxDataTable = BusinessLogicForModeling.GetCapecTaxonomiesDataTable(View.CapecTaxList);
        }

        /// <summary>
        /// Создать граф
        /// </summary>
        /// <param name="userList"></param>
        /// <param name="processedCweCapecs"></param>
        /// <param name="capecTaxonomies"></param>
        /// <returns></returns>
        public void CreateGraph(AdjacencyGraph<string , Edge<string>> graph, List<CommonVulnerability> userList, List<ProcessedCweCapec> processedCweCapecs, List<CapecEntity> capecTaxonomies = null)
        {
            var newGraph = BusinessLogicForModeling.RefreshGraph(graph, userList, processedCweCapecs, capecTaxonomies);
            View.Graph = newGraph;
            if (View.VerticeNames == null)
            {
                //Заполняем возможные списки концептов
                List<string> namesVertices = new List<string>();
                IList<string> cweList = new List<string>();

                //БДУ
                if (View.BduList != null)
                {
                    namesVertices.AddRange(View.BduList.Select(x => x.Id).ToList());

                    //CWE
                    foreach (var bdu in View.BduList)
                    {
                        foreach (var cwe in bdu.Cwe)
                        {
                            if (!cweList.Contains(cwe))
                            {
                                cweList.Add(cwe);
                            }
                        }
                    }
                }

                //CVE
                if (View.CveList != null)
                {
                    namesVertices.AddRange(View.CveList.Select(x => x.Id).ToList());

                    //CWE
                    foreach (var cve in View.CveList)
                    {
                        foreach (var cwe in cve.Cwe)
                        {
                            if (!cweList.Contains(cwe))
                            {
                                cweList.Add(cwe);
                            }
                        }
                    }
                }

                namesVertices.AddRange(cweList);

                if (View.CapecList != null)
                    namesVertices.AddRange(View.CapecList.Select(x => x.Id).ToList());
                View.VerticeNames = namesVertices;
            }
        }

        /// <summary>
        /// Получить путь к созданному графу
        /// </summary>
        /// <returns></returns>
        public string GetReportFilePath()
        {
            return BusinessLogicForModeling.ReportFilePath;
        }
    }
}
