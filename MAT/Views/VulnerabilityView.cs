using CognitiveMaps.MAT.Models;
using CognitiveMaps.MAT.Views;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;


namespace CognitiveMaps.Views
{
    public partial class VulnerabilityView : Form
    {
        public List<CommonVulnerability> VulnList;
        public List<CveEntity> CveList;
        public List<BduEntity> BduList;
        public List<CapecEntity> CapecList;
        public List<ProcessedCweCapec> CweCapecsList;
        public List<CapecEntity> CapecTaxList;
        public DataTable BduDataTable;
        public DataTable CveDataTable;
        public DataTable VulnsDataTable;
        public DataTable CweCapecDataTable;
        public DataTable CapecDataTable;
        public DataTable CapecTaxDataTable;
        public string[] BduHeader;
        public string[] CveHeader;
        public string[] CapecHeader;


        private VulnerabilityPresenter _presenter;

        /// <summary>
        /// Презентер
        /// </summary>
        public VulnerabilityPresenter Presenter
        {
            get { return _presenter ??= new VulnerabilityPresenter(this); }
        }

        /// <summary>
        /// Конструктор
        /// </summary>
        public VulnerabilityView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Событие при закгрузке формы
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            DisableControls();
        }

        /// <summary>
        /// Отключаем все контролы
        /// </summary>
        private void DisableControls()
        {
            //Cve
            buttonAddCveToVulnList.Enabled = false;
            buttonCveDetails.Enabled = false;
            buttonSearchCve.Enabled = false;
            comboBoxCveHeaders.Enabled = false;
            comboBoxCveHeaders.DropDownStyle = ComboBoxStyle.DropDownList;
            textBoxCveSearch.Enabled = false;
            dataGridCve.AllowUserToAddRows = false;
            dataGridCve.RowHeadersVisible = false;

            //Bdu
            buttonAddBduToVulnList.Enabled = false;
            buttonBduDetails.Enabled = false;
            buttonSearchBdu.Enabled = false;
            comboBoxBduHeaders.Enabled = false;
            comboBoxBduHeaders.DropDownStyle = ComboBoxStyle.DropDownList;
            textBoxBduSearch.Enabled = false;
            dataGridBdu.AllowUserToAddRows = false;
            dataGridBdu.RowHeadersVisible = false;

            //Capec
            buttonCapecDetails.Enabled = false;
            buttonSearchCapec.Enabled = false;
            comboBoxCapecHeaders.Enabled = false;
            comboBoxCapecHeaders.DropDownStyle = ComboBoxStyle.DropDownList;
            textBoxCapecSearch.Enabled = false;
            dataGridCapec.AllowUserToAddRows = false;
            dataGridCapec.RowHeadersVisible = false;

            //User
            buttonDeleteFromVulnList.Enabled = false;
            dataGridVulns.RowHeadersVisible = false;
            dataGridVulns.AllowUserToAddRows = false;

            //Cwe-Capecs
            buttonProcessVulnList.Enabled = false;
            dataGridCweCapecs.AllowUserToAddRows = false;
            dataGridCweCapecs.RowHeadersVisible = false;

            //Capec-Tax
            buttonProcessCapecList.Enabled = false;
            dataGridCapecTax.AllowUserToAddRows = false;
            dataGridCapecTax.RowHeadersVisible = false;

            //Graph
            buttonCreateGraph.Enabled = false;
        }

        /// <summary>
        /// Делаем активными контролы
        /// В зависимости от того, какие передадим
        /// </summary>
        /// <param name="buttons"></param>
        /// <param name="dataGridViews"></param>
        private void EnableControls(IList<Button> buttons = null, IList<DataGridView> dataGridViews = null,
            IList<ComboBox> comboBoxes = null, IList<TextBox> textBoxes = null)
        {
            if (buttons != null)
            {
                foreach (var button in buttons)
                    button.Enabled = true;
            }

            if (dataGridViews != null)
            {
                foreach (var dataGridView in dataGridViews)
                {
                    dataGridView.Enabled = true;
                    dataGridView.Visible = true;
                    dataGridView.BackgroundColor = System.Drawing.SystemColors.ButtonHighlight;
                    
                    if (dataGridView.Columns.Contains(columnName: "id"))
                        dataGridView.Columns["id"].Visible = false;

                    if (dataGridView.Rows.Count != 0)
                        dataGridView.CurrentCell = dataGridView.Rows[0].Cells[1];
                }
            }

            if (comboBoxes != null)
            {
                foreach (var comboBox in comboBoxes)
                    comboBox.Enabled = true;
            }

            if (textBoxes != null)
            {
                foreach (var textBox in textBoxes)
                    textBox.Enabled = true;
            }
        }

        /// <summary>
        /// Кнопка загрузки уязвимостей CVE
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GetCVEButton_Click(object sender, System.EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "json files (*.json)|*.json";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBoxCveFilePath.Text = filePath;
                    Presenter.LoadCve(filePath);
                    if (CveList != null && CveDataTable != null && CveHeader != null)
                    {
                        dataGridCve.DataSource = CveDataTable;
                        dataGridCve.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        comboBoxCveHeaders.Items.AddRange(CveHeader);
                        EnableControls(
                            new List<Button>() { buttonAddCveToVulnList, buttonCveDetails, buttonSearchCve },
                            new List<DataGridView>() { dataGridCve, dataGridVulns },
                            new List<ComboBox>() { comboBoxCveHeaders },
                            new List<TextBox>() { textBoxCveSearch }
                            );
                        comboBoxCveHeaders.SelectedIndex = 0;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }

            }
        }


        /// <summary>
        /// Кнопка загрузки уязвимостей Bdu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GetBDUButton_Click(object sender, System.EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "xlsx files (*.xlsx)|*.xlsx";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBoxBduFilePath.Text = filePath;
                    Presenter.LoadBdu(filePath);
                    if (BduList != null && BduDataTable != null && BduHeader != null)
                    {
                        dataGridBdu.DataSource = BduDataTable;
                        dataGridBdu.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        comboBoxBduHeaders.Items.AddRange(BduHeader);
                        EnableControls(
                            new List<Button>() { buttonAddBduToVulnList, buttonBduDetails, buttonSearchBdu},
                            new List<DataGridView>() { dataGridBdu, dataGridVulns },
                            new List<ComboBox>() { comboBoxBduHeaders },
                            new List<TextBox>() { textBoxBduSearch }
                            );
                        comboBoxBduHeaders.SelectedIndex = 0;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }

            }
        }


        /// <summary>
        /// Кнопка получения Capec
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonGetCapec_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "xml files (*.xml)|*.xml";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBoxCapecFilePath.Text = filePath;
                    Presenter.LoadCapec(filePath);
                    if (CapecList != null && CapecDataTable != null && CapecHeader != null)
                    {
                        dataGridCapec.DataSource = CapecDataTable;
                        dataGridCapec.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        comboBoxCapecHeaders.Items.AddRange(CapecHeader);
                        EnableControls(
                            new List<Button>() { buttonCapecDetails, buttonSearchCapec },
                            new List<DataGridView>() { dataGridCapec },
                            new List<ComboBox>() { comboBoxCapecHeaders },
                            new List<TextBox>() { textBoxCapecSearch }
                            );
                        comboBoxCapecHeaders.SelectedIndex = 0;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                    if (VulnList != null)
                    {
                        EnableControls(new List<Button>() { buttonProcessVulnList });
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }
            }
        }


        /// <summary>
        /// Кнопка добавления текущей Cve в пользовательский лист уязвимостей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonAddCveToVulnList_Click(object sender, EventArgs e)
        {
            Presenter.AddToUserList(cve: CveList[Convert.ToInt32(dataGridCve[0, dataGridCve.CurrentCell.RowIndex].Value)]);
            dataGridVulns.DataSource = VulnsDataTable;
            dataGridVulns.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            if (CapecList != null)
            {
                EnableControls(new List<Button>() {buttonProcessVulnList});
            }
            EnableControls(new List<Button>() { buttonDeleteFromVulnList }); 
        }

        /// <summary>
        /// Кнопка добавления текущей Bdu в пользовательский лист уязвимостей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonAddBduToVulnList_Click(object sender, EventArgs e)
        {
            Presenter.AddToUserList(bdu: BduList[Convert.ToInt32(dataGridBdu[0, dataGridBdu.CurrentCell.RowIndex].Value)]);
            dataGridVulns.DataSource = VulnsDataTable;
            dataGridVulns.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            if (CapecList != null)
            {
                EnableControls(new List<Button>() { buttonProcessVulnList});
            }
            EnableControls(new List<Button>() { buttonDeleteFromVulnList });
        }

        /// <summary>
        /// Кнопка "Подробнее" для Cve
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCveDetails_Click(object sender, EventArgs e)
        {
            var cveDetailView = new DetailView(CveList[Convert.ToInt32(dataGridCve[0, dataGridCve.CurrentCell.RowIndex].Value)]);
            cveDetailView.ShowDialog();
        }

        /// <summary>
        /// Кнопка "Подробнее" для Bdu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonBduDetails_Click(object sender, EventArgs e)
        {
            var bduDetailView = new DetailView(BduList[Convert.ToInt32(dataGridBdu[0, dataGridBdu.CurrentCell.RowIndex].Value)]);
            bduDetailView.ShowDialog();
        }


        /// <summary>
        /// Кнопка подробнее Capec
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCapecDetails_Click(object sender, EventArgs e)
        {
            var capecDetailView = new DetailView(CapecList[Convert.ToInt32(dataGridCapec[0, dataGridCapec.CurrentCell.RowIndex].Value)]);
            capecDetailView.ShowDialog();
        }

        /// <summary>
        /// Кнопка поиска по Cve DataGrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSearchCve_Click(object sender, EventArgs e)
        {
            Presenter.SearchInDataGrid(dataGridCve, comboBoxCveHeaders.SelectedItem.ToString(), textBoxCveSearch.Text);
        }

        /// <summary>
        /// Кнопка поиска по Bdu DataGrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSearchBdu_Click(object sender, EventArgs e)
        {
            Presenter.SearchInDataGrid(dataGridBdu, comboBoxBduHeaders.SelectedItem.ToString(), textBoxBduSearch.Text);
        }


        /// <summary>
        /// Кнопка поиска по Capec
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSearchCapec_Click(object sender, EventArgs e)
        {
            Presenter.SearchInDataGrid(dataGridCapec, comboBoxCapecHeaders.SelectedItem.ToString(), textBoxCapecSearch.Text);
        }


        /// <summary>
        /// Кнопка обработки пользовательского списка уязвимостей 
        /// (Сопоставления Cwe к загруженному списку Capec)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonProcessVulnList_Click(object sender, EventArgs e)
        {
            Presenter.ProccessUserList(VulnList, CapecList);
            if (CweCapecDataTable != null)
            {
                dataGridCweCapecs.DataSource = CweCapecDataTable;
                dataGridCweCapecs.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                EnableControls(dataGridViews: new List<DataGridView>() { dataGridCweCapecs }, buttons: new List<Button>() { buttonProcessCapecList, buttonCreateGraph});
                dataGridCweCapecs.AutoResizeColumn(1);
            }
        }

        /// <summary>
        /// Кнопка обработки листа капеков 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonProcessCapecList_Click(object sender, EventArgs e)
        {
            Presenter.ProcessCapecList(CweCapecsList);
            if (CapecTaxDataTable != null)
            {
                dataGridCapecTax.DataSource = CapecTaxDataTable;
                dataGridCapecTax.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                EnableControls(dataGridViews: new List<DataGridView>() { dataGridCapecTax });
                dataGridCapecTax.AutoResizeColumn(1);
            }

        }


        /// <summary>
        /// Кнопка создания графа
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCreateGraph_Click(object sender, EventArgs e)
        {
            Presenter.CreateGraph(VulnList, CweCapecsList, CapecTaxList);
        }

        /// <summary>
        /// Кнопка подробнее об уязвимости (Cve, Bdu) на вкладке построения связей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonVulnDetailsOnRelations_Click(object sender, EventArgs e)
        {
            //Определяем тип уязвимости (Bdu / Cve)
            var typeVuln = dataGridVulns[0, dataGridVulns.CurrentCell.RowIndex].Value as string;
            //По первому символу создаем форму с нужным конструктором
            switch (typeVuln[0])
            {
                case 'C':
                    var cve = CveList.Where(x => x.Id == dataGridVulns[0, dataGridVulns.CurrentCell.RowIndex].Value as string).FirstOrDefault();
                    var cveDetailView = new DetailView(cve);
                    cveDetailView.ShowDialog();
                    break;
                case 'B':
                    var bdu = BduList.Where(x => x.Id == dataGridVulns[0, dataGridVulns.CurrentCell.RowIndex].Value as string).FirstOrDefault();
                    var bduDetailView = new DetailView(bdu);
                    bduDetailView.ShowDialog();
                    break;
            }
        }

        /// <summary>
        /// Кнопка подробнее о Cwe на вкладке построения связей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCweDetailsOnRelations_Click(object sender, EventArgs e)
        {
            int cweId;
            string cwe = dataGridCweCapecs[0, dataGridCweCapecs.CurrentCell.RowIndex].Value as string;
            int.TryParse(string.Join("", cwe.Where(c => char.IsDigit(c))), out cweId);
            var url = string.Format("https://cwe.mitre.org/data/definitions/{0}.html", cweId);
            System.Diagnostics.Process.Start("explorer.exe", url);
        }

        /// <summary>
        /// Кнопка подробнее о Capec на вкладке построения связей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCapecDetailsOnRelations_Click(object sender, EventArgs e)
        {
            var capec = CapecList.Where(x => x.Id == dataGridCapecTax[0, dataGridCapecTax.CurrentCell.RowIndex].Value as string).FirstOrDefault();
            var capecDetailView = new DetailView(capec);
            capecDetailView.ShowDialog();
        }

        /// <summary>
        /// Кнопка удаления записи из листа уязвимостей пользователя
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteFromVulnList_Click(object sender, EventArgs e)
        {
            Presenter.DeleteFromVulnList(dataGridVulns.CurrentCell.RowIndex);
            dataGridVulns.DataSource = VulnsDataTable;
            if (VulnList.Count == 0)
            {
                buttonDeleteFromVulnList.Enabled = false;
                buttonProcessVulnList.Enabled = false;
            }
        }

        /// <summary>
        /// Кнопка удаления записи из листа Cwe -> Capec
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteFromCweList_Click(object sender, EventArgs e)
        {
            Presenter.DeleteFromCweList(dataGridCweCapecs.CurrentCell.RowIndex);
            dataGridCweCapecs.DataSource = CweCapecDataTable;
            if (CweCapecsList.Count == 0)
            {
                buttonDeleteFromCapecList.Enabled = false;
                buttonProcessCapecList.Enabled = false;
            }
        }

        /// <summary>
        /// Кнопка удаления записи из листа Capec -> Other (OWASP,WASC)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteFromCapecList_Click(object sender, EventArgs e)
        {
            Presenter.DeleteFromCapecList(dataGridCapecTax.CurrentCell.RowIndex);
            dataGridCapecTax.DataSource = CapecTaxDataTable;
            if (VulnList.Count == 0)
                buttonDeleteFromCapecList.Enabled = false;
        }

    }

}
