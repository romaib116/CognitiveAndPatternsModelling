using CognitiveMaps.MAT.Models;
using CognitiveMaps.MAT.Views;
using CognitiveMaps.FCM.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.Drawing;
using QuickGraph;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Accord.Controls;
using System.Globalization;

namespace CognitiveMaps.Views
{
    public partial class VulnerabilityView : Form
    {
        #region Инициализация переменных, объектов, методов необходимых для корректной работы формы

        //Списки объектов
        public List<CommonVulnerability> VulnList;
        public List<CveEntity> CveList;
        public List<BduEntity> BduList;
        public List<CapecEntity> CapecList;
        public List<CweEntity> CweList;
        public List<ProcessedCweCapec> CweCapecsList;
        public List<CapecEntity> CapecTaxList;
        public List<TwoConceptWithWeight> ConceptsWithWeights;


        //DataTable для отображения (заполняются из списков объектов)
        public DataTable BduDataTable;
        public DataTable CveDataTable;
        public DataTable VulnsDataTable;
        public DataTable CweCapecDataTable;
        public DataTable CapecDataTable;
        public DataTable CapecTaxDataTable;
        public DataTable ConceptsWithWeightsDataTable;

        //Заголовки таблиц для поиска по определенному столбцу
        public string[] BduHeader;
        public string[] CveHeader;
        public string[] CapecHeader;

        //Названия всех уязвимостей/атак (для редактирования графа)
        public List<string> VerticeNames;

        private const string NotificationMessage = "Если захотите восстановить удаленные записи, то нажмите кнопку 'обновить связи'";
        private const string NotificationHeader = "Уведомление";
        private const string WarningHeader = "Предупреждение";
        private const string WarningReset = "Вы уверены, что хотите сбросить внесенные пользователем изменения в граф?" +
            "(В таком случае при перестроении графа останутся концепты и связи только построенные ВМ)";
        private const string WarningUserMode = "Вы уверены, что хотите перейти в режим редактирования графа? " +
            "(Если хотите вернуться в обычный режим, то можно нажать кнопку сброса)";
        private const string ErrorVerticeNotExist = "Один из выбранных концептов ещё не существует в графе";
        private const string ErrorVerticeIsExist = "Такой концепт уже существует";
        private const string ErrorBigOrSmallWeight = "Недопустимое значение веса";
        private const string ErrorEdgeNotExist = "Такой связи не существует";
        private const string ErrorEdgeIsExist = "Такая связь уже существует";
        private const string ErrorHeader = "Ошибка";

        //Пользовательский режим (true если пользователь решает сам редактировать граф)
        private bool UserMode = false;


        public AdjacencyGraph<string, Edge<string>> Graph;
        public AdjacencyGraph<string, Edge<string>> FcmGraph;
        public Map Map;

        private VulnerabilityPresenter _presenter;

        /// <summary>
        /// Презентер
        /// </summary>
        public VulnerabilityPresenter Presenter
        {
            get { return _presenter ??= new VulnerabilityPresenter(this); }
        }

        /// <summary>
        /// Конструктор
        /// </summary>
        public VulnerabilityView()
        {
            InitializeComponent();
            Map = new();
        }

        /// <summary>
        /// Событие при закгрузке формы
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            DisableControls();
        }

        /// <summary>
        /// Отключаем все контролы
        /// </summary>
        private void DisableControls()
        {
            //Cve
            buttonAddCveToVulnList.Enabled = false;
            buttonCveDetails.Enabled = false;
            buttonSearchCve.Enabled = false;
            comboBoxCveHeaders.Enabled = false;
            comboBoxCveHeaders.DropDownStyle = ComboBoxStyle.DropDownList;
            textBoxCveSearch.Enabled = false;
            dataGridCve.AllowUserToAddRows = false;
            dataGridCve.RowHeadersVisible = false;

            //Bdu
            buttonAddBduToVulnList.Enabled = false;
            buttonBduDetails.Enabled = false;
            buttonSearchBdu.Enabled = false;
            comboBoxBduHeaders.Enabled = false;
            comboBoxBduHeaders.DropDownStyle = ComboBoxStyle.DropDownList;
            textBoxBduSearch.Enabled = false;
            dataGridBdu.AllowUserToAddRows = false;
            dataGridBdu.RowHeadersVisible = false;

            //Capec
            buttonCapecDetails.Enabled = false;
            buttonSearchCapec.Enabled = false;
            comboBoxCapecHeaders.Enabled = false;
            comboBoxCapecHeaders.DropDownStyle = ComboBoxStyle.DropDownList;
            textBoxCapecSearch.Enabled = false;
            dataGridCapec.AllowUserToAddRows = false;
            dataGridCapec.RowHeadersVisible = false;

            //Vulns
            buttonDeleteFromVulnList.Enabled = false;
            dataGridVulns.RowHeadersVisible = false;
            dataGridVulns.AllowUserToAddRows = false;
            buttonVulnDetailsOnRelations.Enabled = false;
            buttonProcessVulnList.Enabled = false;

            //Cwe-Capecs
            dataGridCweCapecs.AllowUserToAddRows = false;
            dataGridCweCapecs.RowHeadersVisible = false;
            buttonCweDetailsOnRelations.Enabled = false;
            buttonDeleteFromCweList.Enabled = false;

            //Capec-Tax
            buttonProcessCapecList.Enabled = false;
            dataGridCapecTax.AllowUserToAddRows = false;
            dataGridCapecTax.RowHeadersVisible = false;
            buttonDeleteFromCapecList.Enabled = false;
            buttonCapecDetailsOnRelations.Enabled = false;

            //Graph
            buttonDeleteVertice.Enabled = false;
            comboBoxAddVertices.Enabled = false;
            comboBoxAddVertices.DropDownStyle = ComboBoxStyle.DropDownList;
            buttonDeleteEdge.Enabled = false;
            buttonCreateGraph.Enabled = false;
            comboBoxDeleteVertices.Enabled = false;
            comboBoxDeleteVertices.DropDownStyle = ComboBoxStyle.DropDownList;
            comboBoxVerticeFrom.Enabled = false;
            comboBoxVerticeFrom.DropDownStyle = ComboBoxStyle.DropDownList;
            comboBoxVerticeTo.Enabled = false;
            comboBoxVerticeTo.DropDownStyle = ComboBoxStyle.DropDownList;
            buttonResetUserMode.Enabled = false;
            buttonCreateEdge.Enabled = false;
            buttonCreateVertice.Enabled = false;

            //Cwe
            buttonLoadCwe.Enabled = false;
            buttonDeleteConceptsByWeightThreshold.Enabled = false;
            trackBarWeightThreshold.Enabled = false;
            dataGridViewWeightMatrix.Enabled = false;
            dataGridViewWeightMatrix.RowHeadersVisible = false;
            dataGridViewWeightMatrix.AllowUserToAddRows = false;


            //FCM
            comboBoxFCMEdgeFrom.DropDownStyle = ComboBoxStyle.DropDownList;
            comboBoxFCMEdgeTo.DropDownStyle = ComboBoxStyle.DropDownList;
            dataGridViewFCMNames.AllowUserToAddRows = false;
            dataGridViewFCMNames.RowHeadersVisible = false;
            dataGridViewFCMWeights.AllowUserToAddRows = false;
            comboBoxFCMConcepts.DropDownStyle = ComboBoxStyle.DropDownList;
       }

        /// <summary>
        /// Делаем активными контролы
        /// В зависимости от того, какие передадим
        /// </summary>
        /// <param name="buttons"></param>
        /// <param name="dataGridViews"></param>
        private void EnableControls(IList<Button> buttons = null, IList<DataGridView> dataGridViews = null,
            IList<ComboBox> comboBoxes = null, IList<TextBox> textBoxes = null)
        {
            if (buttons != null)
            {
                foreach (var button in buttons)
                    button.Enabled = true;
            }

            if (dataGridViews != null)
            {
                foreach (var dataGridView in dataGridViews)
                {
                    dataGridView.Enabled = true;
                    dataGridView.Visible = true;
                    dataGridView.BackgroundColor = System.Drawing.SystemColors.ButtonHighlight;
                    
                    if (dataGridView.Columns.Contains(columnName: "id"))
                        dataGridView.Columns["id"].Visible = false;

                    if (dataGridView.Rows.Count != 0)
                        dataGridView.CurrentCell = dataGridView.Rows[0].Cells[1];
                }
            }

            if (comboBoxes != null)
            {
                foreach (var comboBox in comboBoxes)
                    comboBox.Enabled = true;
            }

            if (textBoxes != null)
            {
                foreach (var textBox in textBoxes)
                    textBox.Enabled = true;
            }
        }

        #endregion

        #region Работа со справочниками уязвимостей и атак

        /// <summary>
        /// Кнопка загрузки уязвимостей CVE
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GetCVEButton_Click(object sender, System.EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "json files (*.json)|*.json";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBoxCveFilePath.Text = filePath;
                    Presenter.LoadCve(filePath);
                    if (CveList != null && CveDataTable != null && CveHeader != null)
                    {
                        dataGridCve.DataSource = CveDataTable;
                        dataGridCve.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        comboBoxCveHeaders.Items.Clear();
                        comboBoxCveHeaders.Items.AddRange(CveHeader);
                        EnableControls(
                            new List<Button>() { buttonAddCveToVulnList, buttonCveDetails, buttonSearchCve },
                            new List<DataGridView>() { dataGridCve, dataGridVulns },
                            new List<ComboBox>() { comboBoxCveHeaders },
                            new List<TextBox>() { textBoxCveSearch }
                            );
                        comboBoxCveHeaders.SelectedIndex = 0;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }

            }
        }


        /// <summary>
        /// Кнопка загрузки уязвимостей Bdu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GetBDUButton_Click(object sender, System.EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "xlsx files (*.xlsx)|*.xlsx";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBoxBduFilePath.Text = filePath;
                    Presenter.LoadBdu(filePath);
                    if (BduList != null && BduDataTable != null && BduHeader != null)
                    {
                        dataGridBdu.DataSource = BduDataTable;
                        dataGridBdu.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        comboBoxBduHeaders.Items.Clear();
                        comboBoxBduHeaders.Items.AddRange(BduHeader);
                        EnableControls(
                            new List<Button>() { buttonAddBduToVulnList, buttonBduDetails, buttonSearchBdu},
                            new List<DataGridView>() { dataGridBdu, dataGridVulns },
                            new List<ComboBox>() { comboBoxBduHeaders },
                            new List<TextBox>() { textBoxBduSearch }
                            );
                        comboBoxBduHeaders.SelectedIndex = 0;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }

            }
        }


        /// <summary>
        /// Кнопка получения Capec
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonGetCapec_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "xml files (*.xml)|*.xml";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBoxCapecFilePath.Text = filePath;
                    Presenter.LoadCapec(filePath);
                    if (CapecList != null && CapecDataTable != null && CapecHeader != null)
                    {
                        dataGridCapec.DataSource = CapecDataTable;
                        dataGridCapec.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        comboBoxCapecHeaders.Items.Clear();
                        comboBoxCapecHeaders.Items.AddRange(CapecHeader);
                        EnableControls(
                            new List<Button>() { buttonCapecDetails, buttonSearchCapec },
                            new List<DataGridView>() { dataGridCapec },
                            new List<ComboBox>() { comboBoxCapecHeaders },
                            new List<TextBox>() { textBoxCapecSearch }
                            );
                        comboBoxCapecHeaders.SelectedIndex = 0;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                    if (VulnList != null)
                    {
                        EnableControls(new List<Button>() { buttonProcessVulnList });
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }
            }
        }


        /// <summary>
        /// Кнопка добавления текущей Cve в пользовательский лист уязвимостей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonAddCveToVulnList_Click(object sender, EventArgs e)
        {
            if (VulnList != null &&
                VulnList.Select(x => x.Id).ToList().
                                           Contains(CveList[Convert.ToInt32(dataGridCve[0, dataGridCve.CurrentCell.RowIndex].Value)].Id))
                MessageBox.Show(ErrorVerticeIsExist, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);
            else
            {
                Presenter.AddToUserList(cve: CveList[Convert.ToInt32(dataGridCve[0, dataGridCve.CurrentCell.RowIndex].Value)]);
                dataGridVulns.DataSource = VulnsDataTable;
                dataGridVulns.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                if (CapecList != null)
                {
                    EnableControls(new List<Button>() { buttonProcessVulnList });
                }
                EnableControls(new List<Button>() { buttonDeleteFromVulnList, buttonVulnDetailsOnRelations });
            }

        }

        /// <summary>
        /// Кнопка добавления текущей Bdu в пользовательский лист уязвимостей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonAddBduToVulnList_Click(object sender, EventArgs e)
        {
            if (VulnList != null && 
                VulnList.Select(x => x.Id).ToList().
                                           Contains(BduList[Convert.ToInt32(dataGridBdu[0, dataGridBdu.CurrentCell.RowIndex].Value)].Id))
                MessageBox.Show(ErrorVerticeIsExist, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);
            else
            {
                Presenter.AddToUserList(bdu: BduList[Convert.ToInt32(dataGridBdu[0, dataGridBdu.CurrentCell.RowIndex].Value)]);
                dataGridVulns.DataSource = VulnsDataTable;
                dataGridVulns.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                if (CapecList != null)
                {
                    EnableControls(new List<Button>() { buttonProcessVulnList });
                }
                EnableControls(new List<Button>() { buttonDeleteFromVulnList, buttonVulnDetailsOnRelations });
            }
        }

        /// <summary>
        /// Кнопка "Подробнее" для Cve
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCveDetails_Click(object sender, EventArgs e)
        {
            var cveDetailView = new DetailView(CveList[Convert.ToInt32(dataGridCve[0, dataGridCve.CurrentCell.RowIndex].Value)]);
            cveDetailView.ShowDialog();
        }

        /// <summary>
        /// Кнопка "Подробнее" для Bdu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonBduDetails_Click(object sender, EventArgs e)
        {
            var bduDetailView = new DetailView(BduList[Convert.ToInt32(dataGridBdu[0, dataGridBdu.CurrentCell.RowIndex].Value)]);
            bduDetailView.ShowDialog();
        }


        /// <summary>
        /// Кнопка подробнее Capec
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCapecDetails_Click(object sender, EventArgs e)
        {
            var capecDetailView = new DetailView(CapecList[Convert.ToInt32(dataGridCapec[0, dataGridCapec.CurrentCell.RowIndex].Value)]);
            capecDetailView.ShowDialog();
        }

        /// <summary>
        /// Кнопка поиска по Cve DataGrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSearchCve_Click(object sender, EventArgs e)
        {
            Presenter.SearchInDataGrid(dataGridCve, comboBoxCveHeaders.SelectedItem.ToString(), textBoxCveSearch.Text);
        }

        /// <summary>
        /// Кнопка поиска по Bdu DataGrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSearchBdu_Click(object sender, EventArgs e)
        {
            Presenter.SearchInDataGrid(dataGridBdu, comboBoxBduHeaders.SelectedItem.ToString(), textBoxBduSearch.Text);
        }


        /// <summary>
        /// Кнопка поиска по Capec
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSearchCapec_Click(object sender, EventArgs e)
        {
            Presenter.SearchInDataGrid(dataGridCapec, comboBoxCapecHeaders.SelectedItem.ToString(), textBoxCapecSearch.Text);
        }

        #endregion

        #region Работа со связями выявленными от пользовательского списка уязвимостей

        /// <summary>
        /// Кнопка обработки пользовательского списка уязвимостей 
        /// (Сопоставления Cwe к загруженному списку Capec)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonProcessVulnList_Click(object sender, EventArgs e)
        {
            Presenter.ProccessUserList(VulnList, CapecList);
            if (CweCapecDataTable != null && CweCapecsList != null && CweCapecsList?.Count != 0)
            {
                dataGridCweCapecs.DataSource = CweCapecDataTable;
                dataGridCweCapecs.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                EnableControls(dataGridViews: new List<DataGridView>() { dataGridCweCapecs }, 
                    buttons: new List<Button>() { buttonProcessCapecList, buttonCreateGraph, buttonCweDetailsOnRelations, buttonDeleteFromCweList });
                dataGridCweCapecs.AutoResizeColumn(1);
            }

        }

        /// <summary>
        /// Кнопка обработки листа капеков 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonProcessCapecList_Click(object sender, EventArgs e)
        {
            Presenter.ProcessCapecList(CweCapecsList);
            if (CapecTaxDataTable != null)
            {
                dataGridCapecTax.DataSource = CapecTaxDataTable;
                dataGridCapecTax.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                EnableControls(dataGridViews: new List<DataGridView>() { dataGridCapecTax }, 
                    buttons: new List<Button>() { buttonCapecDetailsOnRelations, buttonDeleteFromCapecList});
                dataGridCapecTax.AutoResizeColumn(1);
            }

        }




        /// <summary>
        /// Кнопка подробнее об уязвимости (Cve, Bdu) на вкладке построения связей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonVulnDetailsOnRelations_Click(object sender, EventArgs e)
        {
            //Определяем тип уязвимости (Bdu / Cve)
            var typeVuln = dataGridVulns[0, dataGridVulns.CurrentCell.RowIndex].Value as string;
            string url = string.Empty;
            //По первому символу создаем форму с нужным конструктором
            switch (typeVuln[0])
            {
                case 'C':
                    url = string.Format("https://cve.mitre.org/cgi-bin/cvename.cgi?name={0}", typeVuln);
                    break;
                case 'B':
                    var bduId = typeVuln.Substring(4);
                    url = string.Format("https://bdu.fstec.ru/vul/{0}", bduId);
                    break;
            }
            OpenUrl(url);
        }

        private void OpenUrl (string url)
        {
            try
            {
                Process.Start(url);
            }
            catch
            {
                // hack because of this: https://github.com/dotnet/corefx/issues/10361
                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                {
                    url = url.Replace("&", "^&");
                    Process.Start(new ProcessStartInfo("cmd", $"/c start {url}") { CreateNoWindow = true });
                }
                else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
                {
                    Process.Start("xdg-open", url);
                }
                else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                {
                    Process.Start("open", url);
                }
                else
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Кнопка подробнее о Cwe на вкладке построения связей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCweDetailsOnRelations_Click(object sender, EventArgs e)
        {
            int cweId;
            string cwe = dataGridCweCapecs[0, dataGridCweCapecs.CurrentCell.RowIndex].Value as string;
            int.TryParse(string.Join("", cwe.Where(c => char.IsDigit(c))), out cweId);
            var url = string.Format("https://cwe.mitre.org/data/definitions/{0}.html", cweId);
            OpenUrl(url);
        }

        /// <summary>
        /// Кнопка подробнее о Capec на вкладке построения связей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCapecDetailsOnRelations_Click(object sender, EventArgs e)
        {
            var capec = CapecList.Where(x => x.Id == dataGridCapecTax[0, dataGridCapecTax.CurrentCell.RowIndex].Value as string).FirstOrDefault();
            var capecDetailView = new DetailView(capec);
            capecDetailView.ShowDialog();
        }



        /// <summary>
        /// Кнопка удаления записи из листа уязвимостей пользователя
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteFromVulnList_Click(object sender, EventArgs e)
        {
            Presenter.DeleteFromVulnList(dataGridVulns.CurrentCell.RowIndex);
            dataGridVulns.DataSource = VulnsDataTable;
            if (VulnList.Count == 0)
            {
                buttonDeleteFromVulnList.Enabled = false;
                buttonProcessVulnList.Enabled = false;
                buttonVulnDetailsOnRelations.Enabled = false;
            }
        }

        /// <summary>
        /// Кнопка удаления записи из листа Cwe -> Capec
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteFromCweList_Click(object sender, EventArgs e)
        {
            MessageBox.Show(NotificationMessage, NotificationHeader, MessageBoxButtons.OK, MessageBoxIcon.Information);
            Presenter.DeleteFromCweList(dataGridCweCapecs.CurrentCell.RowIndex);
            dataGridCweCapecs.DataSource = CweCapecDataTable;
            if (CweCapecsList.Count == 0)
            {
                buttonDeleteFromCweList.Enabled = false;
                buttonCweDetailsOnRelations.Enabled = false;
            }
        }

        /// <summary>
        /// Кнопка удаления записи из листа Capec -> Other (WASC итд)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteFromCapecList_Click(object sender, EventArgs e)
        {
            MessageBox.Show(NotificationMessage, NotificationHeader, MessageBoxButtons.OK, MessageBoxIcon.Information);
            Presenter.DeleteFromCapecList(dataGridCapecTax.CurrentCell.RowIndex);
            dataGridCapecTax.DataSource = CapecTaxDataTable;
            if (CapecTaxList.Count == 0)
            {
                buttonDeleteFromCapecList.Enabled = false;
                buttonCapecDetailsOnRelations.Enabled = false;
            }

        }

#endregion

        #region Работа с графом

        /// <summary>
        /// Кнопка создания графа
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCreateGraph_Click(object sender, EventArgs e)
        {
            if (zoomPictureBox.Image != null)
                zoomPictureBox.Image.Dispose();
            zoomPictureBox.Image = null;
            zoomPictureBox.Refresh();

            Presenter.CreateGraph(Graph, VulnList, CweCapecsList, CapecTaxList);
            zoomPictureBox.UpdateImage(new Bitmap(Presenter.GetReportFilePath()));
            buttonCreateGraph.Text = "Обновить граф";
            EnableControls(buttons: new List<Button>() { buttonCreateEdge, buttonCreateVertice, buttonDeleteVertice, buttonDeleteEdge, buttonLoadCwe },
                comboBoxes: new List<ComboBox>() { comboBoxVerticeFrom, comboBoxVerticeTo, comboBoxDeleteVertices, comboBoxAddVertices});

            comboBoxAddVertices.DataSource = VerticeNames;
            comboBoxAddVertices.SelectedIndex = 0;
            RefreshVertices();
        }

        /// <summary>
        /// Обновить список вершин используемых в графе
        /// </summary>
        private void RefreshVertices()
        {
            
            comboBoxVerticeFrom.DataSource = Graph.Vertices.ToList();
            comboBoxVerticeTo.DataSource = Graph.Vertices.ToList();
            comboBoxVerticeFrom.SelectedIndex = 0;
            comboBoxVerticeTo.SelectedIndex = 0;
            comboBoxDeleteVertices.DataSource = Graph.Vertices.ToList();
            comboBoxDeleteVertices.SelectedIndex = 0;
        }

        /// <summary>
        /// Включить пользовательский режим?
        /// </summary>
        public void EnableUserMode()
        {
            if (MessageBox.Show(WarningUserMode, WarningHeader, MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                UserMode = true;
                buttonResetUserMode.Enabled = true;
            }
        }

        /// <summary>
        /// Создать концепт графа
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCreateVertice_Click(object sender, EventArgs e)
        {
            //Проверка, хочет ли пользователь испортить программу
            if (!UserMode)
                EnableUserMode();
            //Если всё-таки захотел или уже давно принял решение
            if (UserMode)
            {
                //Мало ли
                if (Graph != null)
                {
                    var vertice = comboBoxAddVertices.SelectedItem.ToString();
                    if (Graph.ContainsVertex(vertice))
                        MessageBox.Show(ErrorVerticeIsExist, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else
                    {
                        buttonResetUserMode.Enabled = true;
                        Graph.AddVertex(vertice);
                        RefreshVertices();
                    }
                }
                else
                    UserMode = false;
            }
        }


        /// <summary>
        /// Создать связь между концептами графа
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCreateEdge_Click(object sender, EventArgs e)
        {
            //Проверка, хочет ли пользователь испортить программу
            if (!UserMode)
                EnableUserMode();
            //Если всё-таки захотел или уже давно принял решение
            if (UserMode)
            {
                //Мало ли
                if (Graph != null)
                {
                    buttonResetUserMode.Enabled = true;
                    var from = comboBoxVerticeFrom.SelectedItem.ToString();
                    var to = comboBoxVerticeTo.SelectedItem.ToString();

                    if (Graph.ContainsVertex(from) && Graph.ContainsVertex(to))
                    {
                        if (!Graph.ContainsEdge(from, to))
                            Graph.AddEdge(new Edge<string>(from, to));
                        else
                            MessageBox.Show(ErrorEdgeIsExist, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                        MessageBox.Show(ErrorVerticeNotExist, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);

                }
                else
                    UserMode = false;
            }
        }

        /// <summary>
        /// Сброс пользовательского режима (построение графа ВМ)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonResetUserMode_Click(object sender, EventArgs e)
        {
            //Проверка, хочет ли пользователь восстановить свою программку
            if (UserMode)
                if (MessageBox.Show(WarningReset, WarningHeader, MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                    UserMode = false;
            //Если всё-таки захотел или давно принял решение
            if (!UserMode)
            {
                Graph = null;
                buttonCreateGraph.Text = "Построить граф";
                buttonResetUserMode.Enabled = false;
                buttonDeleteEdge.Enabled = false;
                buttonCreateEdge.Enabled = false;
                buttonCreateVertice.Enabled = false;
                buttonDeleteVertice.Enabled = false;
                comboBoxAddVertices.Enabled = false;
                comboBoxVerticeFrom.Enabled = false;
                comboBoxVerticeTo.Enabled = false;
                comboBoxDeleteVertices.Enabled = false;
            }
        }

        /// <summary>
        /// Удаление вершины из графа
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteVertice_Click(object sender, EventArgs e)
        {
            var vertex = comboBoxDeleteVertices.SelectedItem.ToString();
            if (Graph.ContainsVertex(vertex))
            {
                //Проверка, хочет ли пользователь испортить программу
                if (!UserMode)
                    EnableUserMode();
                //Если всё-таки захотел или уже давно принял решение
                if (UserMode)
                {
                    Graph.RemoveVertex(vertex);
                    RefreshVertices();
                }
            }
            else
                MessageBox.Show(ErrorVerticeNotExist, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        /// <summary>
        /// Кнопка удаления связи концептов графа
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteEdge_Click(object sender, EventArgs e)
        {
            var from = comboBoxVerticeFrom.SelectedItem.ToString();
            var to = comboBoxVerticeTo.SelectedItem.ToString();
            if (Graph.ContainsEdge(from, to))
            {
                //Проверка, хочет ли пользователь испортить программу
                if (!UserMode)
                    EnableUserMode();
                //Если всё-таки захотел или уже давно принял решение
                if (UserMode)
                    Graph.RemoveEdge(Graph.Edges.Where(x => x.Source == from && x.Target == to).First());
            }
            else
                MessageBox.Show(ErrorEdgeNotExist, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);                
        }


        #endregion

        /// <summary>
        /// Ползунок порогового веса для удаления концептов
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void trackBarWeightThreshold_Scroll(object sender, EventArgs e)
        {
            labelWeightThreshold.Text = Convert.ToString(trackBarWeightThreshold.Value * 0.01);
        }

        /// <summary>
        /// Удаление концептов по значению порогового веса
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteConceptsByWeightThreshold_Click(object sender, EventArgs e)
        {
            //Проверка, хочет ли пользователь испортить программу
            if (!UserMode)
                EnableUserMode();
            //Если всё-таки захотел или уже давно принял решение
            if (UserMode)
                Presenter.DeleteConceptsByThresholdWeight(Graph, Convert.ToDouble(labelWeightThreshold.Text), ConceptsWithWeights);
        }

        /// <summary>
        /// Кнопка загрузки CWE и задания весов между концептами CWE->CAPEC
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonLoadCwe_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "xml files (*.xml)|*.xml";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBoxCweFilepath.Text = filePath;
                    Presenter.LoadCwe(filePath);
                    if (CweList != null && ConceptsWithWeights != null && ConceptsWithWeightsDataTable != null)
                    {
                        dataGridViewWeightMatrix.DataSource = ConceptsWithWeightsDataTable;
                        dataGridViewWeightMatrix.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        EnableControls(
                            new List<Button>() { buttonDeleteConceptsByWeightThreshold },
                            new List<DataGridView>() { dataGridViewWeightMatrix }
                            );
                        trackBarWeightThreshold.Enabled = true;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }
            }
        }

        private void buttonFCMCreateGraph_Click(object sender, EventArgs e)
        {
            if (zoomPictureBox1.Image != null)
                zoomPictureBox1.Image.Dispose();
            zoomPictureBox1.Image = null;
            zoomPictureBox1.Refresh();

            Presenter.CreateFCM(Map);
            zoomPictureBox1.UpdateImage(new Bitmap(Presenter.GetReportFCMFilePath())); 
        }

        private void buttonFCMConceptAdd_Click(object sender, EventArgs e)
        {
            var haveErrors = false;
            double weight = 0;
            if (!string.IsNullOrWhiteSpace(textBoxFCMConceptWeight.Text))
            {
                try
                {
                    weight = Convert.ToDouble(textBoxFCMConceptWeight.Text);
                }
                catch (Exception exc)
                {
                    MessageBox.Show(exc.Message);
                    haveErrors = true;
                }
            }


            if (!haveErrors)
            {
                if (weight <= -1 || weight >= 1)
                    MessageBox.Show(ErrorBigOrSmallWeight, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                {
                    if (Map.Concepts.Select(x => x.Name).Contains(textBoxFCMConceptName.Text))
                        MessageBox.Show(ErrorVerticeIsExist, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    else
                    {
                        Presenter.AddConceptToFCM(Map, textBoxFCMConceptName.Text, weight);
                        comboBoxFCMEdgeFrom.Items.Clear();
                        comboBoxFCMEdgeTo.Items.Clear();
                        comboBoxFCMEdgeFrom.Items.AddRange(Map.Concepts.Select(x => x.Id).ToArray());
                        comboBoxFCMEdgeTo.Items.AddRange(Map.Concepts.Select(x => x.Id).ToArray());
                        comboBoxFCMConcepts.Items.Clear();
                        comboBoxFCMConcepts.Items.AddRange(Map.Concepts.Select(x => x.Id).ToArray());
                        comboBoxFCMEdgeFrom.SelectedIndex = 0;
                        comboBoxFCMEdgeTo.SelectedIndex = 0;
                        comboBoxFCMConcepts.SelectedIndex = 0;
                        dataGridViewFCMNames.DataSource = Presenter.GetConceptNamesDataTable(Map);
                        dataGridViewFCMWeights.DataSource = new ArrayDataView(Map.WeightMatrix);
                    }
                }
            }


        }

        private void buttonFCMEdgeAdd_Click(object sender, EventArgs e)
        {
            var haveErrors = false;
            double weight = 0;
            if (!string.IsNullOrWhiteSpace(textBoxFCMEdgeWeight.Text))
            {
                try
                {
                    weight = Convert.ToDouble(textBoxFCMEdgeWeight.Text);
                }
                catch (Exception exc)
                {
                    MessageBox.Show(exc.Message);
                    haveErrors = true;
                }
            }
            if (!haveErrors)
            {
                if (weight <= -1 || weight >= 1)
                    MessageBox.Show(ErrorBigOrSmallWeight, ErrorHeader, MessageBoxButtons.OK, MessageBoxIcon.Error);
                else
                {
                    Presenter.AddWeightBetweenConceptsToFCM(Map, comboBoxFCMEdgeFrom.SelectedItem.ToString(), comboBoxFCMEdgeTo.SelectedItem.ToString(), weight);
                    dataGridViewFCMWeights.DataSource = new ArrayDataView(Map.WeightMatrix);
                }
            }

        }

        private void buttonResetFCM_Click(object sender, EventArgs e)
        {
            Map = new();
            comboBoxFCMEdgeFrom.Items.Clear();
            comboBoxFCMEdgeTo.Items.Clear();
            comboBoxFCMConcepts.Items.Clear();
            comboBoxFCMEdgeFrom.Text = string.Empty;
            comboBoxFCMEdgeTo.Text = string.Empty;
            comboBoxFCMConcepts.Text = string.Empty;
            dataGridViewFCMNames.DataSource = Presenter.GetConceptNamesDataTable(Map);
            dataGridViewFCMWeights.DataSource = new ArrayDataView(Map.WeightMatrix);
        }

        private void buttonTrainFCM_Click(object sender, EventArgs e)
        {
            var haveErrors = false;
            while (!haveErrors)
            {
                //Проверка заполненности скорости обучения
                double trainSpeed = 0;
                if (!string.IsNullOrWhiteSpace(textBoxFCMTrainSpeed.Text))
                {
                    try
                    {
                        trainSpeed = Convert.ToDouble(textBoxFCMTrainSpeed.Text);
                    }
                    catch (Exception exc)
                    {
                        MessageBox.Show(exc.Message);
                        haveErrors = true;
                        break;
                    }
                }


                //Проверка заполненности количества итераций
                int maxIterations = 0;
                if (!string.IsNullOrWhiteSpace(textBoxFCMMaxIterations.Text))
                    int.TryParse(textBoxFCMMaxIterations.Text, out maxIterations);


                //Проверка заполненности значения погрешности
                double accuracy = 0;
                if (!string.IsNullOrWhiteSpace(textBoxFCMMaxAccuracy.Text))
                {
                    try
                    {
                        accuracy = Convert.ToDouble(textBoxFCMMaxAccuracy.Text);
                    }

                    catch (Exception exc)
                    {
                        MessageBox.Show(exc.Message);
                        haveErrors = true;
                        break;
                    }
                }


                var haveConcepts = Map.Concepts.Count > 1;
                var haveWeights = false;
                for (int i = 0; i < Math.Sqrt(Map.WeightMatrix.Length); i++)
                {
                    for (int j = 0; j < Math.Sqrt(Map.WeightMatrix.Length); j++)
                    {
                        if (Map.WeightMatrix[i, j] != 0)
                        {
                            haveWeights = true;
                            break;
                        }
                    }
                    if (haveWeights)
                        break;
                }

                var haveDrivers = Map.Concepts.Where(x => x.IsDriver).Any();
                var haveTargetConcepts = Map.Concepts.Where(x => x.IsTarget && x.TargetValue != null).Any();

                //Если все условия совпадают тогда обучаем
                if (haveConcepts && haveWeights && haveDrivers && haveTargetConcepts &&
                    accuracy > 0 && trainSpeed > 0 && maxIterations > 0)
                {
                    Presenter.TrainFCM(Map, maxIterations, trainSpeed, accuracy);
                    dataGridViewFCMNames.DataSource = Presenter.GetConceptNamesDataTable(Map);
                    dataGridViewFCMWeights.DataSource = new ArrayDataView(Map.WeightMatrix);
                    break;
                }
                else
                {
                    MessageBox.Show("Недостаточно данных для оптимизации весов");
                    haveErrors = true;
                }

            }


        }

        private void buttonChangeFCMConcept_Click(object sender, EventArgs e)
        {
            var isTarget = checkBoxFCMConceptIsTarget.Checked;
            var isDriver = checkBoxFCMConceptIsDriver.Checked;
            double targetValue = 0;
            if (!string.IsNullOrWhiteSpace(textBoxFCMConceptTargetValue.Text))
            {
                try
                {
                    targetValue = Convert.ToDouble(textBoxFCMConceptTargetValue.Text);
                }
                catch (Exception exc) { MessageBox.Show(exc.Message); }
            }
            double newConceptValue = 0;
            if (!string.IsNullOrWhiteSpace(textBoxFCMConceptValue.Text))
            {
                try
                {
                    newConceptValue = Convert.ToDouble(textBoxFCMConceptValue.Text);
                }
                catch (Exception exc) { MessageBox.Show(exc.Message); }
            }
            if (isTarget && targetValue == 0)
            {
                MessageBox.Show("Вы забыли ввести значение целевого концепта");
                return;
            }
            if (isTarget && isDriver)
            {
                MessageBox.Show("Концепт не может являться целевым и драйвером одновременно");
                return;
            }

            Presenter.ChangeConceptValueToFCM(Map, comboBoxFCMConcepts.SelectedItem.ToString(), newConceptValue);
            Presenter.MakeDriverToFCM(Map, isDriver, comboBoxFCMConcepts.SelectedItem.ToString());
            Presenter.MakeTargetToFCM(Map, comboBoxFCMConcepts.SelectedItem.ToString(), isTarget, isTarget ? targetValue : null);
            dataGridViewFCMNames.DataSource = Presenter.GetConceptNamesDataTable(Map);

        }

        private void comboBoxFCMConcepts_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxFCMConcepts.Items.Count > 0)
            {
                var currentConcept = Map.Concepts.Where(x => x.Id == comboBoxFCMConcepts.SelectedItem.ToString()).Single();
                checkBoxFCMConceptIsDriver.Checked = currentConcept.IsDriver;
                checkBoxFCMConceptIsTarget.Checked = currentConcept.IsTarget;
                textBoxFCMConceptValue.Text = currentConcept.Value.ToString();
                textBoxFCMConceptTargetValue.Text = currentConcept.TargetValue == null ? string.Empty : currentConcept.TargetValue.ToString();
            }


        }
    }


}
