using CognitiveMaps.MAT.Models;
using CognitiveMaps.MAT.Views;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;


namespace CognitiveMaps.Views
{
    public partial class VulnerabilityView : Form
    {
        public List<CommonVulnerability> UserList;
        public DataTable userDataTable;
        public List<CveEntity> CveList;
        public List<BduEntity> BduList;
        public DataTable BduDataTable;
        public DataTable CveDataTable;
        public string[] BduHeaders;
        public string[] CveHeaders;


        private VulnerabilityPresenter _presenter;

        /// <summary>
        /// Презентер
        /// </summary>
        public VulnerabilityPresenter Presenter
        {
            get { return _presenter ??= new VulnerabilityPresenter(this); }
        }

        /// <summary>
        /// Конструктор
        /// </summary>
        public VulnerabilityView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Событие при закгрузке формы
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            DisableControls();
        }

        /// <summary>
        /// Отключаем все контролы
        /// </summary>
        private void DisableControls()
        {
            buttonAddCveToVulnList.Enabled = false;
            buttonCveDetails.Enabled = false;
            buttonSearchCve.Enabled = false;
            comboBoxCveHeaders.Enabled = false;
            comboBoxCveHeaders.DropDownStyle = ComboBoxStyle.DropDownList;
            textBoxCveSearch.Enabled = false;
            dataGridCve.AllowUserToAddRows = false;
            dataGridCve.RowHeadersVisible = false;

            buttonAddBduToVulnList.Enabled = false;
            buttonBduDetails.Enabled = false;
            buttonSearchBdu.Enabled = false;
            comboBoxBduHeaders.Enabled = false;
            comboBoxBduHeaders.DropDownStyle = ComboBoxStyle.DropDownList;
            textBoxBduSearch.Enabled = false;
            dataGridBdu.AllowUserToAddRows = false;
            dataGridBdu.RowHeadersVisible = false;

            buttonDeleteFromVulnList.Enabled = false;
            dataGridUser.RowHeadersVisible = false;
            dataGridUser.AllowUserToAddRows = false;

            buttonCreateGraph.Enabled = false;
        }

        /// <summary>
        /// Делаем активными контролы
        /// В зависимости от того, какие передадим
        /// </summary>
        /// <param name="buttons"></param>
        /// <param name="dataGridViews"></param>
        private void EnableControls(IList<Button> buttons = null, IList<DataGridView> dataGridViews = null,
            IList<ComboBox> comboBoxes = null, IList<TextBox> textBoxes = null)
        {
            if (buttons != null)
            {
                foreach (var button in buttons)
                    button.Enabled = true;
            }

            if (dataGridViews != null)
            {
                foreach (var dataGridView in dataGridViews)
                {
                    dataGridView.Enabled = true;
                    dataGridView.Visible = true;
                    dataGridView.BackgroundColor = System.Drawing.SystemColors.ButtonHighlight;
                }
            }

            if (comboBoxes != null)
            {
                foreach (var comboBox in comboBoxes)
                    comboBox.Enabled = true;
            }

            if (textBoxes != null)
            {
                foreach (var textBox in textBoxes)
                    textBox.Enabled = true;
            }
        }

        /// <summary>
        /// Кнопка загрузки уязвимостей CVE
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GetCVEButton_Click(object sender, System.EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "json files (*.json)|*.json";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBox1.Text = filePath;
                    Presenter.LoadCve(filePath);
                    if (CveList != null && CveDataTable != null && CveHeaders != null)
                    {
                        dataGridCve.DataSource = CveDataTable;
                        comboBoxCveHeaders.Items.AddRange(CveHeaders);
                        EnableControls(
                            new List<Button>() { buttonAddCveToVulnList, buttonCveDetails, buttonSearchCve, buttonDeleteFromVulnList },
                            new List<DataGridView>() { dataGridCve, dataGridUser },
                            new List<ComboBox>() { comboBoxCveHeaders },
                            new List<TextBox>() { textBoxCveSearch }
                            );
                        comboBoxCveHeaders.SelectedIndex = 0;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }
                
            }
        }


        /// <summary>
        /// Кнопка загрузки уязвимостей Bdu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GetBDUButton_Click(object sender, System.EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.InitialDirectory = "c:\\";
                openFileDialog.Filter = "xlsx files (*.xlsx)|*.xlsx";
                openFileDialog.FilterIndex = 2;
                openFileDialog.RestoreDirectory = true;

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var filePath = openFileDialog.FileName;
                    textBox2.Text = filePath;
                    Presenter.LoadBdu(filePath);
                    if (BduList != null && BduDataTable != null && BduHeaders != null)
                    {
                        dataGridBdu.DataSource = BduDataTable;
                        comboBoxBduHeaders.Items.AddRange(BduHeaders);
                        EnableControls(
                            new List<Button>() { buttonAddBduToVulnList, buttonBduDetails, buttonSearchBdu, buttonDeleteFromVulnList },
                            new List<DataGridView>() { dataGridBdu, dataGridUser },
                            new List<ComboBox>() { comboBoxBduHeaders },
                            new List<TextBox>() { textBoxBduSearch } 
                            );
                        comboBoxBduHeaders.SelectedIndex = 0;
                    }
                    else
                    {
                        throw new ArgumentNullException("Возникла ошибка загрузки данных");
                    }
                }
                else
                {
                    MessageBox.Show("Вы не добавили файл");
                }

            }
        }

        /// <summary>
        /// Кнопка добавления текущей Cve в пользовательский лист уязвимостей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonAddCveToVulnList_Click(object sender, EventArgs e)
        {                
            Presenter.AddToUserList(cve: CveList[dataGridCve.CurrentCell.RowIndex]);
            dataGridUser.DataSource = userDataTable;
        }

        /// <summary>
        /// Кнопка добавления текущей Bdu в пользовательский лист уязвимостей
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonAddBduToVulnList_Click(object sender, EventArgs e)
        {
            Presenter.AddToUserList(bdu: BduList[dataGridBdu.CurrentCell.RowIndex]);
            dataGridUser.DataSource = userDataTable;
        }

        /// <summary>
        /// Кнопка "Подробнее" для Cve
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCveDetails_Click(object sender, EventArgs e)
        {
            var cveDetailView = new DetailView(CveList[dataGridCve.CurrentCell.RowIndex]);
            cveDetailView.ShowDialog();
        }

        /// <summary>
        /// Кнопка "Подробнее" для Bdu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonBduDetails_Click(object sender, EventArgs e)
        {
            var bduDetailView = new DetailView(BduList[dataGridBdu.CurrentCell.RowIndex]);
            bduDetailView.ShowDialog();
        }

        /// <summary>
        /// Кнопка поиска по Cve DataGrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSearchCve_Click(object sender, EventArgs e)
        {
            Presenter.SearchInDataGrid(dataGridCve, comboBoxCveHeaders.SelectedItem.ToString(), textBoxCveSearch.Text);
        }

        /// <summary>
        /// Кнопка поиска по Bdu DataGrid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSearchBdu_Click(object sender, EventArgs e)
        {
            Presenter.SearchInDataGrid(dataGridBdu, comboBoxBduHeaders.SelectedItem.ToString(), textBoxBduSearch.Text);
        }

        /// <summary>
        /// Кнопка удаления записи из листа уязвимостей пользователя
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonDeleteFromVulnList_Click(object sender, EventArgs e)
        {
            Presenter.DeleteFromUserList(dataGridUser.CurrentCell.RowIndex);
            dataGridUser.DataSource = userDataTable;
        }


        /// <summary>
        /// Кнопка создания графа на основе заполненного списка пользователя
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonCreateGraph_Click(object sender, EventArgs e)
        {

        }
    }

}
